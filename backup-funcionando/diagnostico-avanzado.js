// Script de diagn√≥stico avanzado
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://zfibsvuntawggeixrhsk.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpmaWJzdnVudGF3Z2dlaXhyaHNrIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjM2NDc4MiwiZXhwIjoyMDY3OTQwNzgyfQ.eGGGOTRXmtB1z7i2RjLgHd669uZ35F0Sm7qCeKRr4Wc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticoCompleto() {
  try {
    console.log('üîç DIAGN√ìSTICO COMPLETO DEL BOT\n');
    
    // 1. Verificar cliente
    console.log('1Ô∏è‚É£ Verificando cliente...');
    const { data: cliente, error: errorCliente } = await supabase
      .from('clientes')
      .select('*')
      .eq('facebook_page_id', '608661302340026')
      .single();

    if (errorCliente || !cliente) {
      console.log('‚ùå PROBLEMA: Cliente no encontrado');
      console.log('Intentando con Page ID alternativo...');
      
      const { data: clienteAlt, error: errorAlt } = await supabase
        .from('clientes')
        .select('*')
        .eq('facebook_page_id', '61577782224691')
        .single();
        
      if (clienteAlt) {
        console.log('‚úÖ Cliente encontrado con Page ID alternativo:', clienteAlt.facebook_page_id);
        console.log('üîß SOLUCI√ìN: Actualizar Page ID en Facebook Developer Console');
      } else {
        console.log('‚ùå No se encontr√≥ cliente con ning√∫n Page ID');
      }
      return;
    }

    console.log('‚úÖ Cliente encontrado:', cliente.nombre_negocio);
    console.log('üì± Page ID:', cliente.facebook_page_id);

    // 2. Verificar tabla conversaciones
    console.log('\n2Ô∏è‚É£ Verificando tabla conversaciones...');
    const { data: conversaciones, error: errorConv } = await supabase
      .from('conversaciones')
      .select('*')
      .limit(1);

    if (errorConv) {
      console.log('‚ùå PROBLEMA: Tabla conversaciones no existe');
      console.log('üîß SOLUCI√ìN: Crear tabla conversaciones');
    } else {
      console.log('‚úÖ Tabla conversaciones existe');
    }

    // 3. Verificar tabla mensajes
    console.log('\n3Ô∏è‚É£ Verificando tabla mensajes...');
    const { data: mensajes, error: errorMens } = await supabase
      .from('mensajes')
      .select('*')
      .limit(1);

    if (errorMens) {
      console.log('‚ùå PROBLEMA: Tabla mensajes no existe');
      console.log('üîß SOLUCI√ìN: Crear tabla mensajes');
    } else {
      console.log('‚úÖ Tabla mensajes existe');
    }

    console.log('\nüìã RESUMEN DEL DIAGN√ìSTICO:');
    console.log('- Cliente configurado:', cliente ? '‚úÖ' : '‚ùå');
    console.log('- Tabla conversaciones:', errorConv ? '‚ùå' : '‚úÖ');
    console.log('- Tabla mensajes:', errorMens ? '‚ùå' : '‚úÖ');
    
  } catch (err) {
    console.error('‚ùå Error en diagn√≥stico:', err);
  }
}

diagnosticoCompleto();